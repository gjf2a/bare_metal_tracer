use crate::vga_buffer::{BUFFER_WIDTH, BUFFER_HEIGHT};
use pc_keyboard::DecodedKey;
use crate::println;

#[derive(Copy,Clone,Eq,PartialEq)]
#[repr(u8)]
enum Cell {
    Dot,
    Empty,
    Wall,
    PowerDot
}

#[derive(Copy,Clone,Eq,PartialEq)]
pub struct Position {
    col: usize, row: usize
}

#[derive(Clone)]
pub struct Pacman {
    cells: [[Cell; BUFFER_WIDTH]; BUFFER_HEIGHT],
    pacman: Position,
    pacman_char: char,
    ghosts: [Position; 4]
}

const START: &'static str =
    "################################################################################
     #.........A............................................................A.......#
     #.#################.##.##.###.####.#.##############.##.##.##.##.################
     #.#################.##.##.###.####.#.##############.##.##.##.##.################
     #.#################.##.##.###.####.#.##############.##.##.##.##.################
     #.#################.##.##.###.####.#.##############.##.##.##.##.################
     ........O.........................................................O.............
     ###.####.#####.######.####.#.#.#######.#.####.####.#.######.#.####.###.###.##.##
     ###.####.#####.######.####.#.#.#######.#.####.####.#.######.#.####.###.###.##.##
     ###.####.#####.######.####.#.#.#######.#.####.####.#.######.#.####.###.###.##.##
     ###.####.#####.######.####.#.#.#######.#.####.####.#.######.#.####.###.###.##.##
     ###.####.#####.######.####.#.#.#######.#.####.####.#.######.#.####.###.###.##.##
     .......................................<........................................
     #####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.##
     #####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.##
     #####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.##
     #####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.##
     #####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.##
     #####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.#####.##
     .........O...........................................................O..........
     ####.####.####.####.####.####.####.####.####.####.####.####.####.####.####.##.##
     ####.####.####.####.####.####.####.####.####.####.####.####.####.####.####.##.##
     #.........A............................................................A.......#
     ################################################################################";

impl Pacman {
    pub fn new() -> Self {
        let mut cells = [[Cell::Dot; BUFFER_WIDTH]; BUFFER_HEIGHT];
        let mut pacman = Position { col: 0, row: 0};
        let mut pacman_char = '>';
        let mut ghosts = [Position {col: 0, row: 0}; 4];
        let mut ghost = 0;
        for (row, row_chars) in START.split('\n').enumerate() {
            println!("row: {} len: {}", row, row_chars.len());
            for (col, chr) in row_chars.trim().chars().enumerate() {
                match chr {
                    '#' => cells[row][col] = Cell::Wall,
                    '.' => {},
                    'A' => {
                        ghosts[ghost] = Position {row, col};
                        ghost += 1;
                    },
                    'O' => cells[row][col] = Cell::PowerDot,
                    '>' |'<' | '^' | 'v' => {
                        pacman = Position {row, col};
                        pacman_char = chr;
                    },
                    _ =>  panic!("Unrecognized character: '{}'", chr)
                }
            }
        }
        assert_eq!(ghost, 4);
        Pacman {cells, pacman, pacman_char, ghosts}
    }

    pub fn tick(&mut self) {

    }

    pub fn key(&mut self, key: Option<DecodedKey>) {

    }
}